<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:camel-cxf="http://camel.apache.org/schema/cxf"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:wsa="http://cxf.apache.org/ws/addressing"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd
http://camel.apache.org/schema/cxf 
http://camel.apache.org/schema/cxf/camel-cxf.xsd
http://cxf.apache.org/core 
http://cxf.apache.org/schemas/core.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml" />


	<camel:camelContext id="camelContext">
		<camel:jmxAgent id="agent" disabled="false" />
		<camel:routeBuilder ref="sampleRouteBuilder" />
	</camel:camelContext>

	<bean id="sampleRouteBuilder" depends-on="routeModelExtender"
		class="bg.siv.samples.ws.hl7.SampleRouteBuilder">
	</bean>

	<!-- DSL extensions provided by platform-camel-core -->
	<bean id="coreModelExtension"
		class="org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension">
	</bean>

	<!-- DSL extensions provided by platform-camel-hl7 -->
	<bean id="hl7ModelExtension"
		class="org.openehealth.ipf.platform.camel.hl7.extend.Hl7ModelExtension" />


	<!-- HAPI extensions provided by modules-hl7 -->
	<bean id="hapiModelExtension"
		class="org.openehealth.ipf.modules.hl7.extend.HapiModelExtension">
		<property name="mappingService" ref="mappingService" />
	</bean>

	<!-- Code mapping service using map.groovy as mapping table -->
	<bean id="mappingService" class="org.openehealth.ipf.commons.map.BidiMappingService">
		<property name="mappingScript" value="classpath:hl7.map" />
	</bean>

	<bean id="routeModelExtender"
		class="org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender">
		<property name="routeModelExtensions">
			<list>
				<ref bean="coreModelExtension" />
				<ref bean="hl7ModelExtension" />
				<ref bean="hapiModelExtension" />
			</list>
		</property>
	</bean>

	<!-- configure CXF bus: enable WSA -->
	<cxf:bus>
		<cxf:features>
			<wsa:addressing />
		</cxf:features>
	</cxf:bus>

	<!-- configure cxf jmx -->
	<bean id="org.apache.cxf.management.InstrumentationManager"
		class="org.apache.cxf.management.jmx.InstrumentationManagerImpl">
		<property name="bus" ref="cxf" />
		<property name="enabled" value="true" />
		<property name="server" ref="mbeanServer" />
	</bean>

	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
		<property name="locateExistingServerIfPossible" value="true" />
	</bean>

	<!-- transport service -->
	<camel-cxf:cxfEndpoint id="soapObservationResultMessageEndpoint"
		address="http://localhost:9000/hl7app/ObservationResultConsumerService"
		wsdlURL="src/main/resources/wsdl/hl7/hl7-ws.wsdl"
		serviceClass="bg.siv.samples.ws.hl7.ObservationResultPortType"
		endpointName="soap-hl7:ObservationResultConsumer_Port_Soap12" serviceName="soap-hl7:ObservationResultConsumer_Service"
		xmlns:soap-hl7="urn:ws:soap:hl7v2">
		<camel-cxf:properties>
			<entry key="dataFormat" value="POJO" />
		</camel-cxf:properties>
		<camel-cxf:inInterceptors>
			<ref bean="cxfNormalizePayloadInInterceptor" />
		</camel-cxf:inInterceptors>
		<camel-cxf:outInterceptors>
		  <ref bean="cxfNormalizePayloadOutInterceptor" />
		</camel-cxf:outInterceptors>
	</camel-cxf:cxfEndpoint>

	<bean id="cxfNormalizePayloadInInterceptor"
		class="bg.siv.samples.ws.hl7.cxf.interceptor.NormalizePayloadInInterceptor" />
		
    <bean id="cxfNormalizePayloadOutInterceptor"
        class="bg.siv.samples.ws.hl7.cxf.interceptor.NormalizePayloadOutInterceptor" />

    <!-- default 'nak' message builder -->
	<bean id="genericFailureProcessor" class="bg.siv.samples.ws.hl7.processor.GenericFailureProcessor"/>

</beans>
